# https://github.com/rust-lang/rust-analyzer/blob/aa00ddcf654a35ba0eafe17247cf189958d33182/.github/workflows/release.yaml

name: Release
on:
  workflow_dispatch:
  # when tag is pushed

  # temp
  push:
    branches:
      - lsp

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
  CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc

jobs:
  dist:
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            code-target: win32-x64
          - os: windows-latest
            target: i686-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            code-target: win32-arm64
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            code-target: linux-x64
            container: rockylinux:8
          - os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            code-target: linux-arm64
          - os: ubuntu-20.04
            target: arm-unknown-linux-gnueabihf
            code-target: linux-armhf
          - os: macos-12
            target: x86_64-apple-darwin
            code-target: darwin-x64
          - os: macos-12
            target: aarch64-apple-darwin
            code-target: darwin-arm64

    runs-on: ${{ matrix.os }}
    name: dist (${{ matrix.target }})
    container: ${{ matrix.container }}

    steps:
      - uses: actions/checkout@v4
      - name: Install toolchain dependencies
        if: matrix.container == 'rockylinux:8'
        shell: bash
        run: |
          dnf install -y gcc
          curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL "https://sh.rustup.rs" | sh -s -- --profile minimal --default-toolchain none -y
          echo "${CARGO_HOME:-$HOME/.cargo}/bin" >> $GITHUB_PATH

      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update stable
          rustup target add ${{ matrix.target }}
          rustup component add rust-src

      - name: Update apt repositories
        if: matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'arm-unknown-linux-gnueabihf'
        run: sudo apt-get update

      - name: Install AArch64 target toolchain
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get install gcc-aarch64-linux-gnu

      - name: Install ARM target toolchain
        if: matrix.target == 'arm-unknown-linux-gnueabihf'
        run: sudo apt-get install gcc-arm-linux-gnueabihf

      # TODO: dist

      - uses: pnpm/action-setup@v4
        with:
          package_json_file: clients/vscode/package.json
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: clients/vscode/pnpm-lock.yaml

      - run: pnpm install --frozen-lockfile
        working-directory: clients/vscode

      - name: Package Extension
        if: matrix.code-target
        run: npx vsce package -o "../../dist/fluent-bit-language-server-${{ matrix.code-target }}.vsix" --target ${{ matrix.code-target }}
        working-directory: clients/vscode

      # XXX: I don't think no-server version is needed for now.

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.target }}
          path: ./dist
  
  dist-x86_64-unknown-linux-musl:
    name: dist (x86_64-unknown-linux-musl)
    runs-on: ubuntu-latest
    env:
      FLB_LS_TARGET: x86_64-unknown-linux-musl
      # For some reason `-crt-static` is not working for clang without lld
      RUSTFLAGS: "-C link-arg=-fuse-ld=lld -C target-feature=-crt-static"
    container:
      image: rust:alpine
      volumes:
        - /usr/local/cargo/registry:/usr/local/cargo/registry

    steps:
      - name: Install dependencies
        run: apk add --no-cache git clang lld musl-dev nodejs npm

      - uses: actions/checkout@v4

      - name: Dist
        run: cargo xtask dist --client-patch-version ${{ github.run_number }}

      - uses: pnpm/action-setup@v4
        with:
          package_json_file: clients/vscode/package.json
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: clients/vscode/pnpm-lock.yaml

      - run: pnpm install --frozen-lockfile
        working-directory: clients/vscode

      - name: Package Extension (release)
        if: github.ref == 'refs/heads/release'
        run: npx vsce package -o "../../dist/rust-analyzer-alpine-x64.vsix" --target alpine-x64
        working-directory: clients/vscode

      - run: rm -rf editors/code/server

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-x86_64-unknown-linux-musl
          path: ./dist

  publish:
    name: publish
    runs-on: ubuntu-latest
    needs: [ "dist", "dist-x86_64-unknown-linux-musl" ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: actions/download-artifact@v4
        with:
          name: dist-aarch64-apple-darwin
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-x86_64-apple-darwin
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-x86_64-unknown-linux-gnu
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-x86_64-unknown-linux-musl
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-aarch64-unknown-linux-gnu
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-arm-unknown-linux-gnueabihf
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-x86_64-pc-windows-msvc
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-i686-pc-windows-msvc
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-aarch64-pc-windows-msvc
          path: dist

      - run: ls -al ./dist

      # TODO: publish release

      - uses: pnpm/action-setup@v4
        with:
          package_json_file: clients/vscode/package.json
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: clients/vscode/pnpm-lock.yaml

      - run: pnpm install --frozen-lockfile
        working-directory: clients/vscode

      #      - run: pnpm dlx vsce publish --pat ${{ secrets.VSCE_TOKEN }} --packagePath ../../dist/fluent-bit-language-server-*.vsix
      #        working-directory: clients/vscode
      - run: pnpm dlx vsce ls --packagePath ../../dist/fluent-bit-language-server-*.vsix
        working-directory: clients/vscode

      # TODO: ovsx
